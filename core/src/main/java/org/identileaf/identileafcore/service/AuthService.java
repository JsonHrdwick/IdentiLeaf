package org.identileaf.identileafcore.service;

import jakarta.servlet.http.HttpServletRequest;
import org.identileaf.identileafcore.model.User;
import org.identileaf.identileafcore.model.UserDTO;
import org.identileaf.identileafcore.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.stereotype.Service;

@Service
public class AuthService {

    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;
    private final HttpServletRequest httpServletRequest;

    @Autowired
    public AuthService(UserRepository userRepository, PasswordEncoder passwordEncoder, HttpServletRequest httpServletRequest) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.httpServletRequest = httpServletRequest;
    }

    /**
     * Handles registering a new user. Must be connected to a valid database. Table will be auto-generated by hibernate
     * if it does not already exist. Validation should be checked prior to calling this method as it does not handle any.
     * @param userDTO Class containing the information from the register form that is passed by the frontend submission
     */
    public void registerNewUser(UserDTO userDTO) {

        User user = new User();
        user.setUsername(userDTO.getUsername());
        user.setPassword(passwordEncoder.encode(userDTO.getPassword()));
        user.setRole("USER");
        user.setAccountLocked(false);

        userRepository.save(user);
        autoLoginUser(user);
    }

    /**
     * Logins in a user and generates a session token for persistence. Only used in the register method
     * @param user User to be logged in
     */
    private void autoLoginUser(User user) {
        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                user.getUsername(),
                user.getPassword(),
                user.getAuthorities());

        SecurityContextHolder.getContext().setAuthentication(authentication);

        httpServletRequest.getSession().setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY, SecurityContextHolder.getContext());
    }

    /**
     * Checks if a user already exists in the database
     * @param username User to check
     * @return Boolean true/false whether the user exists/not
     */
    public boolean userExists(String username) {
        return userRepository.existsByUsername(username);
    }

    /**
     * Checks if an email is a valid email address
     * @param email Email to check
     * @return Boolean true/false whether the email is valid/not
     */
    public boolean validateNewEmail(String email){
        String regex = "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?";
        return email.matches(regex);
    }

    /**
     * Checks if a password meets the system requirements or not. Requirements defined are: At least 8 characters with
     * at least one number and one special character
     * @param password Password to check
     * @return Boolean true/false whether the conditions are met/not
     */
    public boolean validateNewPassword(String password) {
        // Regex new password
        String regex = "^(?=.*\\d)(?=.*[a-z])(?=.*[a-zA-Z]).{8,}$";
        return password.matches(regex);
    }

}